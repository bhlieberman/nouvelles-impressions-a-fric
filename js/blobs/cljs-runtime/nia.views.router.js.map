{"version":3,"sources":["nia/views/router.cljs"],"mappings":";;;;;;;;;AAQA,0BAAA,1BAAMA;AAAN,AACE,oBAAA,AAAAC,hBAAMC,gCAAe,sDAAA,mFAAA,zIAACC;mBAAtB,AAAAF,fACMG,+BAAc,sDAAA,mFAAA,zIAACD;AADrB,AAAA,kHAAA,2CAAA,6DAAA,qGAAA,uDAAA,yDAAA,2DAAA,yDAAA,6DAAA,tgBAEGE,mNAEEC,sYAIC,iCAAA,fAAMJ,eACJ,iBAAAK,aACyB,AAAA,mFAAOL;IADhCK,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAAOG;iBAAP,AAAAD,4CAAAF,eAAA,xEACOI;IACDC,OAAK,AAAA,mFAAOV;IACZW,QAAM,iBAAAC,WAAQF;IAARE,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAa,mDAAAA,SAAA,5DAACC;IAAdD,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAA8B,4CAAAA,aAAA,IAAA,7DAACE;AAA/B,AAAA,GAAA,CAAAF,gBAAA;AAAA;;AAAA,4BAAAA,rBAAyCG;;;AAHrD,AAIE,IAAAC,qBAAgB,eAAA,4EAAA,iFAAA,aAAA,WAAA,YAAA,WAAA,3NAACE,8DAAO,AAACC,eAAKV;AAA9B,AAAA,oBAAAO;AAAA,aAAAA,TAASC;AAAT,AACE,IAAMG,QAAM,AAACb,4CAAIL,aAAae;AAA9B,AAAA,gIAAA,2CAAA,6DAAA,gGAAA,4DAAA,1SACGI,iOAA0Bb,mEACJG,6DACA,AAACW,gDAAOF;;AAJnC,0FAKGZ;;KAVP","names":["nia.views.router/router","cljs.core/deref","current-route","re_frame.core.subscribe","parens-depth","nia.views.navbar/navbar","re-com.core/h-box","map__37993","cljs.core/--destructure-map","cljs.core.get","view","route-name","path","canto","G__37994","clojure.string.split","cljs.core.nth","cljs.core/parse-long","temp__5802__auto__","parens","cljs.core/some","cljs.core/name","depth","nia.views.parens-scroll/parens-scroll","reagent.core.atom"],"sourcesContent":["(ns nia.views.router\n  (:require [clojure.string :as str]\n            [reagent.core :as r]\n            [re-frame.core :refer [subscribe]]\n            [re-com.core :refer [h-box]]\n            [nia.views.navbar :refer [navbar]]\n            [nia.views.parens-scroll :refer [parens-scroll]]))\n\n(defn router []\n  (let [current-route @(subscribe [:routing/current-route])\n        parens-depth @(subscribe [:poem/parens-depth])]\n    [navbar\n     {:children\n      [h-box\n       :align :center\n       :justify :center\n       :children\n       [(when current-route\n          (let [{view :view\n                 route-name :name} (:data current-route)\n                path (:path current-route)\n                canto (some-> path (str/split #\"/\") (nth 3 \"\") parse-long)]\n            (if-let [parens (some #{(name route-name)} #{\"one\" \"two\" \"three\" \"four\" \"five\"})]\n              (let [depth (get parens-depth parens)]\n                [parens-scroll {:children [view]\n                                :canto canto\n                                :depth (r/atom depth)}])\n              [view])))]]}]))\n"]}