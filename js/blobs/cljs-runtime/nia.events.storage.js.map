{"version":3,"sources":["nia/events/storage.cljs"],"mappings":";;;;;;;;AAOA,wBAAA,2CAAA,kDAAA,kGAAA,wDAAA,2CAAA,gEAAA,mFAAA,mEAAA,mEAAA,mFAAA,mFAAA,zvBAACA,mzBAIS,6CAAAC,FAAmBI;AAAnB,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;gBAAA,AAAAE,4CAAAF,eAAA,vEAA6BI;kBAA7B,AAAAF,4CAAAF,eAAA,zEAA2CK;AAA3C,AACE,IAAUC,SAAO,AAAgBD,0BAAYD;IACvCG,MAAI,6CAAA,7CAACC;AADX,AAEE,uBAAA,WAAeC,lCAAK,AAAWH;AAA/B,AACU,0BAAA,WAAeI,9BAAK,AAAYD;AAAhC,AACU,IAAUE,UAAQ,AAACC,oBAAuBF;AAA1C,AACE,OAACG,sBAAON,IAAII;;;;AAClCJ;GAXd,qDAAA,mFAAA,sDAAA,kDAAA;AAcA,uBAAA,vBAACO,2GAEA,WAAKC;AAAL,AACE,0DAAA,nDAACC,8CAAMD,yFAA0B,KAAAE,4DAAoB,4BAAA,3BAAKC,+BAAYC;;AAEzE,yDAAA,zDAACC,qIAEA,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASnB;UAAT,AAAAoB,4CAAAD,WAAA,IAAA,jEAAWf;AAAX,AACE,wDAAA,jDAACS,8CAAMQ,8DAAcjB;;AAExB,yDAAA,yGAAA,lKAACkB,qPAEC,wDAAA,xDAACC,qJACF,WAAAC,SAA0CxB;AAA1C,AAAA,IAAAyB,aAAAD;IAAAC,iBAAA,AAAA3B,4BAAA2B;0BAAA,AAAA1B,4CAAA0B,eAAA,jFAAiBC;SAAjB,AAAA3B,4CAAA0B,eAAA,hEAAqCJ;AAArC,AACE,IAAUM,mBAAiB,uCAAA,vCAAqBD;AAAhD,AAAA,kDAAA,sLAAA,kDAAA,mFAAA,mFAAA,6DAAA,mFAAA,iFAAA,/jBACO,iDAAA,jDAACb,8CAAMQ,sEAAgBM;;AAGjC,yDAAA,zDAACL,0IAEA,WAAAM,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAhC,4BAAAgC;SAAA,AAAA/B,4CAAA+B,eAAA,hEAAaT;IAAbU,aAAAF;QAAA,AAAAT,4CAAAW,WAAA,IAAA,/DAAmB/B;UAAnB,AAAAoB,4CAAAW,WAAA,IAAA,jEAAqB3B;AAArB,AACE,IAAMF,cAAY,AAAA,iGAAcmB;AAAhC,AAAA,kDAAA,6EAAA,mFACsBnB,YAAYE;;AAErC,qBAAA,rBAAC4B,kGAEA,WAAAC;AAAA,AAAA,IAAAC,aAAAD;aAAA,AAAAb,4CAAAc,WAAA,IAAA,pEAAU/B;eAAV,AAAAiB,4CAAAc,WAAA,IAAA,tEAAiBC;AAAjB,AACE,IAAA,AAAK,IAAUjC,cAAY,AAAgBC,qBAAOgC;AAA7C,AACE,mCAAA,WAAe7B,vCAAK,AAAWJ;AAA/B,AACU,0BAAA,WAAeK,9BAAK,AAAYD;AAAhC,AACU,IAAUE,UAAQ,AAACC,oBAAuBF;AAA1C,AACE,8BAAA,mFAAA,1GAAC8B,sLAA6B7B;;;gBAJ3D,GAAA,CAAA4B,kBAKYE;AALZ,QAAAF,JAKqBG;AALrB,AAMO,OAACC,cAAiBD;;AANzB,AAAA,MAAAH","names":["re-frame.alpha/reg-flow","p__37945","map__37946","cljs.core/--destructure-map","cljs.core.get","_","image-url","blob-client","client","url","cljs.core.atom","blob","body","obj-url","js/URL.createObjectURL","cljs.core/reset!","re-frame.core/reg-cofx","cofx","cljs.core.assoc","js/shadow.esm.esm_import$$azure$storage_blob.BlobServiceClient","nia.config.storage/sas-url","nia.config.storage/sas-token","re_frame.core.reg_event_db","p__37947","vec__37948","cljs.core.nth","db","re_frame.core.reg_event_fx","re_frame.core.inject_cofx","p__37951","map__37952","blob-service-client","container-client","p__37953","p__37954","map__37955","vec__37956","re-frame.core/reg-fx","p__37959","vec__37960","img-name","e37963","re-frame.core/dispatch","js/Error","e","js/console.error"],"sourcesContent":["(ns nia.events.storage\n  (:require [nia.config.storage :refer [sas-url sas-token]]\n            [re-frame.alpha :refer [reg-flow]]\n            [re-frame.core :refer [dispatch inject-cofx reg-cofx reg-event-db reg-event-fx reg-fx]]\n            [shadow.cljs.modern :refer [js-await]]\n            [\"@azure/storage-blob\" :refer [BlobServiceClient]]))\n\n(reg-flow\n {:id ::blob-flow\n  :inputs {:image-url [:image/url]\n           :blob-client [:blob-client]}\n  :output (fn get-new-image [_ {:keys [image-url ^js blob-client]}]\n            (let [^js client (.getBlobClient blob-client image-url)\n                  url (atom nil)]\n              (js-await [^js blob (.download client)]\n                        (js-await [^js body (.-blobBody blob)]\n                                  (let [^js obj-url (js/URL.createObjectURL body)]\n                                    (reset! url obj-url))))\n              url))\n  :path [:canto :one :image]})\n\n(reg-cofx\n :blob-service-client\n (fn [cofx]\n   (assoc cofx :blob-service-client (BlobServiceClient. (str sas-url \"?\" sas-token)))))\n\n(reg-event-db\n :images/create-url\n (fn [db [_ url]]\n   (assoc db :image/url url)))\n\n(reg-event-fx\n :config.storage/load-blob-client\n [(inject-cofx :blob-service-client)]\n (fn [{:keys [^js blob-service-client db]} _]\n   (let [^js container-client (.getContainerClient blob-service-client \"nia\")]\n     {:db (assoc db :blob-client container-client)\n      :fx [[:dispatch [:storage/get-new-url \"snowman.jpeg\"]]]})))\n\n(reg-event-fx\n :storage/get-new-url\n (fn [{:keys [db]} [_ url]]\n   (let [blob-client (:blob-client db)]\n     {:update-image-url [blob-client url]})))\n\n(reg-fx\n :update-image-url\n (fn [[^js client img-name]]\n   (try (let [^js blob-client (.getBlobClient client img-name)]\n          (js-await [^js blob (.download blob-client)]\n                    (js-await [^js body (.-blobBody blob)]\n                              (let [^js obj-url (js/URL.createObjectURL body)]\n                                (dispatch [:images/create-url obj-url])))))\n        (catch js/Error e\n          (js/console.error e)))))"]}