{"version":3,"sources":["re_frame/flow/alpha.cljc"],"mappings":"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","names":["re-frame.flow.alpha/db-path?","cljs.core/vector?","re-frame.flow.alpha/flow?","cljs.core/map?","re-frame.flow.alpha/id?","cljs.core/keyword?","re-frame.flow.alpha/flows","cljs.core.atom","re-frame.flow.alpha/lookup","x","cljs.core/deref","cljs.core.get","re-frame.flow.alpha/id","G__33343","p__33344","map__33346","cljs.core/--destructure-map","map__33347","map__33348","re-frame.flow.alpha/input-ids","live-inputs","calc-inputs","cljs.core.mapv","cljs.core.remove","cljs.core.into","cljs.core/vals","re-frame.flow.alpha/topsort","flows","cljs.core.map","cljs.core/reverse","re-frame.utils/topsort-kahn","re-frame.utils/map-vals","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","re-frame.flow.alpha/safe-update-in","seq33356","G__33357","cljs.core/first","cljs.core/next","G__33358","G__33359","self__5754__auto__","m","path","f","args","cljs.core/empty?","cljs.core.apply","cljs.core/update-in","re-frame.flow.alpha/deep-cleanup","db","new-data","re_frame.flow.alpha.safe_update_in","cljs.core/pop","cljs.core/dissoc","cljs.core/peek","cljs.core.get_in","p__33380","map__33381","re-frame.flow.alpha/->flow","output","live?","inputs","G__33385","and__5043__auto__","p1__33378#","cljs.core.update","G__33384","cljs.core.update_in","cljs.core/merge","G__33383","p1__33379#","G__33382","cljs.core.dissoc","re-frame.flow.alpha/default","id","cljs.core/constantly","cljs.core.gensym","cljs.core/assoc-in","G__33391","re-frame.flow.alpha/reg-flow","js/Error","k","re_frame.flow.alpha.reg_flow","cljs.core.assoc","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/with-meta","cljs.core.merge","G__33406","re-frame.flow.alpha/clear-flow","cljs.core/vary-meta","cljs.core/update","cljs.core/into","cljs.core/empty","temp__5804__auto__","flow","re-frame.flow.alpha/get-output","value","G__33415","re-frame.flow.alpha/flow-fx-ids","re-frame.flow.alpha/do-fx","re_frame.interceptor.__GT_interceptor","p__33423","map__33427","map__33428","fx","effects","ctx","flow-fx","cljs.core/filterv","cljs.core.comp","cljs.core/select-keys","seq__33429","cljs.core/seq","chunk__33430","count__33431","i__33432","vec__33450","cljs.core.nth","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__33487","v","temp__5802__auto__","re_frame.registrar.get_handler","re_frame.loggers.console","cljs.core.partial","cljs.core/remove","cljs.core/set","re-frame.flow.alpha/update-flow","map__33503","map__33504","map__33505","init","cleanup","cleared?","new?","cljs.core/meta","old-db","re_frame.interceptor.get_coeffect","new-db","or__5045__auto__","re_frame.interceptor.get_effect","id->old-live-input","id->live-input","id->old-input","id->input","dirty?","cljs.core.not_EQ_","bardo","p1__33496#","cljs.core/not","update-db","G__33513","cljs.core._EQ_","p1__33497#","p1__33498#","p1__33499#","G__33515","cljs.core/identity","G__33520","re-frame.interceptor/update-effect","cljs.core.fnil","re-frame.flow.alpha/with-cleared","p__33533","vec__33534","re-frame.flow.alpha/interceptor","all-flows","p1__33537#","cljs.core.vary_meta","cljs.core.reduce","cljs.core/memoize"],"sourcesContent":["(ns re-frame.flow.alpha\n  (:require\n   [re-frame.utils :as u]\n   [re-frame.registrar :refer [get-handler]]\n   [re-frame.loggers     :refer [console]]\n   [re-frame.interceptor :refer [->interceptor get-effect get-coeffect update-effect]]))\n\n(def db-path? vector?)\n\n(def flow? map?)\n\n(def id? keyword?)\n\n(def flows (atom {}))\n\n(defn lookup [x]\n  (cond\n    (flow? x) x\n    (id? x) (get @flows x)))\n\n(defn id [x]\n  (cond-> x (flow? x) :id))\n\n(defn input-ids [{{live-inputs :inputs} :live?\n                  {calc-inputs :inputs} :output}]\n  (mapv id (remove db-path? (-> #{} (into (vals live-inputs)) (into (vals calc-inputs))))))\n\n(defn topsort [flows]\n  (map flows (reverse (u/topsort-kahn (u/map-vals input-ids flows)))))\n\n(defn safe-update-in [m path f & args]\n  (if (empty? path)\n    (apply f m args)\n    (apply update-in m path f args)))\n\n(defn deep-cleanup [db path]\n  (if\n   (empty? path) db\n   (let [new-data (safe-update-in db (pop path) dissoc (peek path))]\n     (if-not (empty? (get-in new-data (pop path)))\n       new-data\n       (recur new-data (pop path))))))\n\n(defn ->flow [{:keys [output live? inputs] :as m}]\n  (-> m\n      (cond-> (and output (not (map? output)))\n        (update :output #(do {:fn %})))\n      (cond-> output\n        (update-in [:output :inputs] merge inputs))\n      (cond-> (and live? (not (map? live?)))\n        (update :live? #(do {:fn %})))\n      (cond-> live?\n        (update-in [:live? :inputs] merge inputs))\n      (dissoc :inputs)))\n\n(defn default [id]\n  {:id id\n   :path [id]\n   :inputs {}\n   :live? {:inputs {}\n           :fn (constantly true)}\n   :output {:inputs {}\n            :fn (constantly (str \"Hello World \" (gensym)))}\n   :init (fn [db path] (assoc-in db path {}))\n   :cleanup deep-cleanup})\n\n(defn reg-flow\n  ([k m] (reg-flow (assoc m :id k)))\n  ([m] (swap! flows assoc\n              (id m) (with-meta (->flow (merge (default (id m)) m))\n                       {::new true}))))\n\n(defn clear-flow\n  ([]\n   (swap! flows vary-meta update ::cleared into @flows)\n   (swap! flows empty))\n  ([x]\n   (when-let [flow (lookup x)]\n     (swap! flows vary-meta update ::cleared assoc (id flow) flow)\n     (swap! flows dissoc (id flow)))))\n\n(defn get-output [db value]\n  (if (vector? value)\n    (get-in db value)\n    (some->> value lookup :path (get-output db))))\n\n(def flow-fx-ids #{:reg-flow :clear-flow})\n\n(def do-fx\n  (->interceptor\n   {:id :do-flow-fx\n    :after (fn [{{:keys [fx] :as effects} :effects :as ctx}]\n             (let [flow-fx\n                   (into (filterv (comp flow-fx-ids first) fx)\n                         (select-keys effects flow-fx-ids))]\n               (if (empty? flow-fx)\n                 ctx\n                 (do\n                   (doseq [[k v] flow-fx]\n                     (if-let [f (get-handler :fx k false)]\n                       (f v)\n                       (console :warn \"re-frame: in \\\":fx\\\" effect found \"\n                                k\n                                \" which has no associated handler. Ignoring.\")))\n                   (update-in ctx [:effects :fx] (partial remove (set flow-fx)))))))}))\n\n(defn update-flow [ctx flow]\n  (let [{:keys                           [path init cleanup]\n         ::keys                          [cleared?]\n         {live? :fn live-inputs :inputs} :live?\n         {output :fn inputs :inputs}     :output}\n        flow\n        new?               (::new (meta flow))\n        old-db             (get-coeffect ctx :db)\n        new-db             (or (get-effect ctx :db) old-db)\n        id->old-live-input (u/map-vals (partial get-output old-db) live-inputs)\n        id->live-input     (u/map-vals (partial get-output new-db) live-inputs)\n        id->old-input      (u/map-vals (partial get-output old-db) inputs)\n        id->input          (u/map-vals (partial get-output new-db) inputs)\n        dirty?             (not= id->input id->old-input)\n        bardo              (mapv #(if % :live :dead)\n                                 [(and (live? old-db id->old-live-input) (not new?))\n                                  (and (live? new-db id->live-input) (not cleared?))])\n        update-db          (case bardo\n                             [:live :live] #(cond-> %\n                                              dirty? (update-in path output id->input))\n                             [:dead :dead] identity\n                             [:live :dead] #(cleanup % path)\n                             [:dead :live] #(cond-> (init % path)\n                                              (or dirty? new?) (update-in path output id->input)))]\n    (update-effect ctx :db (fnil update-db (get-coeffect ctx :db)))))\n\n(defn with-cleared [m]\n  (into m (map (fn [[k v]] [[::cleared k (gensym)] (assoc v ::cleared? true)])\n               (::cleared (meta m)))))\n\n(def interceptor\n  (->interceptor\n   {:id :flow\n    :after (fn [ctx]\n             (let [all-flows (with-cleared @flows)]\n               (swap! flows vary-meta dissoc ::cleared)\n               (swap! flows (partial u/map-vals #(vary-meta % dissoc ::new)))\n               (reduce update-flow ctx ((memoize topsort) all-flows))))}))\n\n#_(do\n    (def still-alive\n      {:coeffects {:db {:l? :alive}}\n       :effects   {:db {:l? :alive}}})\n\n    (def still-dead\n      {:coeffects {:db {:l? :dead}}\n       :effects   {:db {:l? :dead}}})\n\n    (def died\n      {:coeffects {:db {:l? :alive :sometimes-path :SOMETIMES}}\n       :effects   {:db {:l? :dead}}})\n\n    (def born\n      {:coeffects {:db {:l? :dead}}\n       :effects   {:db {:l? :alive}}})\n\n    (def flow-after (:after interceptor))\n\n    (reg-flow\n     :db\n     {:live? (constantly true)\n      :output (fn [data _] data)\n      :path []})\n\n    (reg-flow\n     :sometimes-flow\n     {:live? (comp #{:alive} :l?)\n      :inputs [:db]\n      :output (fn [data inputs] :SOMETIMES)\n      :path [:sometimes-path]})\n\n    (reg-flow\n     :always-flow\n     {:live? (constantly true)\n      :inputs [:sometimes-flow]\n      :output (fn [data inputs] inputs)\n      :path [:always-path]})\n\n    (assert (= (flow-after still-alive)\n               {:coeffects {:db {:l? :alive :sometimes-path :SOMETIMES}}\n                :effects   {:db {:l? :alive :sometimes-path :SOMETIMES}}}))\n    (assert (= (flow-after still-dead)\n               {:coeffects {:db {:l? :dead}}\n                :effects   {:db {:l? :dead}}}))\n    (assert (= (flow-after died)\n               {:coeffects {:db {:l? :alive :sometimes-path :SOMETIMES}}\n                :effects   {:db {:l? :dead}}}))\n    (assert (= (flow-after born)\n               {:coeffects {:db {:l? :dead}}\n                :effects   {:db {:l? :alive :sometimes-path :SOMETIMES}}}))\n\n    (swap! flows dissoc :sometimes-flow)\n\n    nil)\n"],"x_google_ignoreList":[0]}