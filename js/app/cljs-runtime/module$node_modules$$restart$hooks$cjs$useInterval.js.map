{
"version":3,
"file":"module$node_modules$$restart$hooks$cjs$useInterval.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,kDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/GA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,OAAR,CAAkB,IAAK,EACvB,KAAIC,OAASL,OAAA,CAAQ,iCAAR,CAAb,CACIM,iBACJC,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIL,CAAAA,UAAX,CAAwBK,GAAxB,CAA8B,CAAEJ,QAASI,GAAX,CAAvC,CADd,CAAuBR,OAAA,CAAQ,wDAAR,CAAvB,CAwFvBE,QAAQE,CAAAA,OAAR,CA1BAK,QAAoB,CAACC,EAAD,CAAKC,EAAL,CAASC,MAAA,CAAS,CAAA,CAAlB,CAAyBC,cAAA,CAAiB,CAAA,CAA1C,CAAiD,CACnE,IAAIC,MACJ,OAAMC,MAAQ,GAAIT,gBAAiBF,CAAAA,OAArB,EAA8BM,EAA9B,CAAd,CAGMM,UAAY,GAAIV,gBAAiBF,CAAAA,OAArB,EAA8BQ,MAA9B,CAHlB;AAIMK,KAAO,EAAAA,EAAM,CACbD,SAAUE,CAAAA,OAAd,GACAH,KAAMG,CAAAA,OAAN,EAMA,CADAC,YAAA,CAAaL,MAAb,CACA,CAAAA,MAAA,CAASM,UAAA,CAAWH,IAAX,CAAiBN,EAAjB,CAPT,CADiB,CAUnB,IAAIN,MAAOgB,CAAAA,SAAX,EAAsB,EAAA,EAAM,CACtBR,cAAJ,CACEI,IAAA,EADF,EAJAE,YAAA,CAAaL,MAAb,CACA,CAAAA,MAAA,CAASM,UAAA,CAAWH,IAAX,CAAiBN,EAAjB,CAGT,CAKA,OAAO,EAAA,EAAMQ,YAAA,CAAaL,MAAb,CANa,CAA5B,CAOG,CAACF,MAAD,CAASC,cAAT,CAPH,CAhBmE,CApE0C;",
"sources":["node_modules/@restart/hooks/cjs/useInterval.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$restart$hooks$cjs$useInterval\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _react = require(\"react\");\nvar _useCommittedRef = _interopRequireDefault(require(\"./useCommittedRef\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Creates a `setInterval` that is properly cleaned up when a component unmounted\n *\n * ```tsx\n *  function Timer() {\n *    const [timer, setTimer] = useState(0)\n *    useInterval(() => setTimer(i => i + 1), 1000)\n *\n *    return <span>{timer} seconds past</span>\n *  }\n * ```\n *\n * @param fn an function run on each interval\n * @param ms The milliseconds duration of the interval\n */\n\n/**\n * Creates a pausable `setInterval` that is properly cleaned up when a component unmounted\n *\n * ```tsx\n *  const [paused, setPaused] = useState(false)\n *  const [timer, setTimer] = useState(0)\n *\n *  useInterval(() => setTimer(i => i + 1), 1000, paused)\n *\n *  return (\n *    <span>\n *      {timer} seconds past\n *\n *      <button onClick={() => setPaused(p => !p)}>{paused ? 'Play' : 'Pause' }</button>\n *    </span>\n * )\n * ```\n *\n * @param fn an function run on each interval\n * @param ms The milliseconds duration of the interval\n * @param paused Whether or not the interval is currently running\n */\n\n/**\n * Creates a pausable `setInterval` that _fires_ immediately and is\n * properly cleaned up when a component unmounted\n *\n * ```tsx\n *  const [timer, setTimer] = useState(-1)\n *  useInterval(() => setTimer(i => i + 1), 1000, false, true)\n *\n *  // will update to 0 on the first effect\n *  return <span>{timer} seconds past</span>\n * ```\n *\n * @param fn an function run on each interval\n * @param ms The milliseconds duration of the interval\n * @param paused Whether or not the interval is currently running\n * @param runImmediately Whether to run the function immediately on mount or unpause\n * rather than waiting for the first interval to elapse\n *\n\n */\n\nfunction useInterval(fn, ms, paused = false, runImmediately = false) {\n  let handle;\n  const fnRef = (0, _useCommittedRef.default)(fn);\n  // this ref is necessary b/c useEffect will sometimes miss a paused toggle\n  // orphaning a setTimeout chain in the aether, so relying on it's refresh logic is not reliable.\n  const pausedRef = (0, _useCommittedRef.default)(paused);\n  const tick = () => {\n    if (pausedRef.current) return;\n    fnRef.current();\n    schedule(); // eslint-disable-line no-use-before-define\n  };\n\n  const schedule = () => {\n    clearTimeout(handle);\n    handle = setTimeout(tick, ms);\n  };\n  (0, _react.useEffect)(() => {\n    if (runImmediately) {\n      tick();\n    } else {\n      schedule();\n    }\n    return () => clearTimeout(handle);\n  }, [paused, runImmediately]);\n}\nvar _default = useInterval;\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","__esModule","default","_react","_useCommittedRef","_interopRequireDefault","obj","useInterval","fn","ms","paused","runImmediately","handle","fnRef","pausedRef","tick","current","clearTimeout","setTimeout","useEffect"]
}
