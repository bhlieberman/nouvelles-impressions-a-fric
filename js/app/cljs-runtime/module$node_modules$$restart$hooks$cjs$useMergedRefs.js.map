{
"version":3,
"file":"module$node_modules$$restart$hooks$cjs$useMergedRefs.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAUjHC,QAASA,UAAS,CAACC,IAAD,CAAOC,IAAP,CAAa,CAC7B,MAAMC,EAAIC,OAAA,CAAQH,IAAR,CAAV,CACMI,EAAID,OAAA,CAAQF,IAAR,CACV,OAAOI,MAAA,EAAS,CACVH,CAAJ,EAAOA,CAAA,CAAEG,KAAF,CACHD,EAAJ,EAAOA,CAAA,CAAEC,KAAF,CAFO,CAHa,CAP/BP,OAAQQ,CAAAA,UAAR,CAAqB,CAAA,CACrBR,QAAQS,CAAAA,OAAR,CAAkB,IAAK,EACvBT,QAAQC,CAAAA,SAAR,CAAoBA,SACpB,KAAIS,OAASZ,OAAA,CAAQ,iCAAR,CACb,OAAMO,QAAUM,GAAAN,EAAQM,GAAD,EAAuB,UAAvB,GAAQ,MAAOA,IAAf,CAA0CJ,KAAA,EAAS,CACxEI,GAAIC,CAAAA,OAAJ,CAAcL,KAD0D,CAAnD,CAAoCI,GAgC3DX,QAAQS,CAAAA,OAAR,CAJAI,QAAsB,CAACX,IAAD,CAAOC,IAAP,CAAa,CACjC,MAAO,GAAIO,MAAOI,CAAAA,OAAX,EAAoB,EAAA,EAAMb,SAAA,CAAUC,IAAV;AAAgBC,IAAhB,CAA1B,CAAiD,CAACD,IAAD,CAAOC,IAAP,CAAjD,CAD0B,CAnC8E;",
"sources":["node_modules/@restart/hooks/cjs/useMergedRefs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$restart$hooks$cjs$useMergedRefs\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nexports.mergeRefs = mergeRefs;\nvar _react = require(\"react\");\nconst toFnRef = ref => !ref || typeof ref === 'function' ? ref : value => {\n  ref.current = value;\n};\nfunction mergeRefs(refA, refB) {\n  const a = toFnRef(refA);\n  const b = toFnRef(refB);\n  return value => {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\nfunction useMergedRefs(refA, refB) {\n  return (0, _react.useMemo)(() => mergeRefs(refA, refB), [refA, refB]);\n}\nvar _default = useMergedRefs;\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","mergeRefs","refA","refB","a","toFnRef","b","value","__esModule","default","_react","ref","current","useMergedRefs","useMemo"]
}
