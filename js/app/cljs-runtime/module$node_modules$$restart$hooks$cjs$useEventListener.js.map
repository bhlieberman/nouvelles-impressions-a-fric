{
"version":3,
"file":"module$node_modules$$restart$hooks$cjs$useEventListener.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,OAAR,CAaAC,QAAyB,CAACC,WAAD,CAAcC,KAAd,CAAqBC,QAArB,CAA+BC,OAAA,CAAU,CAAA,CAAzC,CAAgD,CACvE,MAAMC,QAAU,GAAIC,iBAAkBP,CAAAA,OAAtB,EAA+BI,QAA/B,CAChB,IAAII,MAAOC,CAAAA,SAAX,EAAsB,EAAA,EAAM,CAC1B,MAAMC,OAAgC,UAAvB,GAAA,MAAOR,YAAP,CAAoCA,WAAA,EAApC,CAAoDA,WACnEQ,OAAOC,CAAAA,gBAAP,CAAwBR,KAAxB,CAA+BG,OAA/B,CAAwCD,OAAxC,CACA,OAAO,EAAA,EAAMK,MAAOE,CAAAA,mBAAP,CAA2BT,KAA3B,CAAkCG,OAAlC,CAA2CD,OAA3C,CAHa,CAA5B,CAIG,CAACH,WAAD,CAJH,CAFuE,CAZzE,KAAIM,OAASZ,OAAA,CAAQ,iCAAR,CAAb;AACIW,kBACJM,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIf,CAAAA,UAAX,CAAwBe,GAAxB,CAA8B,CAAEd,QAASc,GAAX,CAAvC,CADb,CAAuBlB,OAAA,CAAQ,yDAAR,CAAvB,CAN4F;",
"sources":["node_modules/@restart/hooks/cjs/useEventListener.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$restart$hooks$cjs$useEventListener\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = useEventListener;\nvar _react = require(\"react\");\nvar _useEventCallback = _interopRequireDefault(require(\"./useEventCallback\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Attaches an event handler outside directly to specified DOM element\n * bypassing the react synthetic event system.\n *\n * @param element The target to listen for events on\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\nfunction useEventListener(eventTarget, event, listener, capture = false) {\n  const handler = (0, _useEventCallback.default)(listener);\n  (0, _react.useEffect)(() => {\n    const target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\n    target.addEventListener(event, handler, capture);\n    return () => target.removeEventListener(event, handler, capture);\n  }, [eventTarget]);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","__esModule","default","useEventListener","eventTarget","event","listener","capture","handler","_useEventCallback","_react","useEffect","target","addEventListener","removeEventListener","_interopRequireDefault","obj"]
}
