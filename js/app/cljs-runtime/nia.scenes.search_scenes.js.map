{"version":3,"sources":["nia/scenes/search_scenes.cljs"],"mappings":";;AAKA,AAAAA,oCAAA,AAAAC,kCAAA,2CAAA,kDAAA,oHAAA,oDAAA,EAAA,sDAAA,KAAA,qEAAA;mCAAAC;AAAA,AACE,IAAMC,QAAM,gDAAA,hDAACC;AAAb,AAAA,0FAAA,yHAAA,mFAAA,yEAAA,2CAAA,oDAAA,0EAAA,yBAAA,mFAAA,gNAAA,2CAAA,qDAAA,yDAAA,kDAAA,kEAAA,mEAAA,0BAAA,8DASgB,WAAKC;AAAL,AAAQ,GAAM,oDAAA,pDAACC,6CAAE,AAAQD;AAAjB,AACE,mBAAA,AAAAE,ZAACC,4BAAgBL;;AADnB;;GATxB,+DAWgB,WAAKE;AAAL,AAAQ,IAAMI,UAAQ,AAAA,AAAIJ;AAAlB,AACE,OAACK,sBAAOP,MAAMM;;;;IAb1CP;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;CAAA,qDAAA","names":["portfolio.data/register-scene!","portfolio.reagent-18/create-scene","args","value","reagent.core.atom","e","cljs.core._EQ_","cljs.core/deref","js/console.log","current","cljs.core/reset!"],"sourcesContent":["(ns nia.scenes.search-scenes\n  (:require [portfolio.reagent-18 :refer-macros [defscene]]\n            [\"react\" :refer [createRef]]\n            [reagent.core :as r]))\n\n(defscene search-scene []\n  (let [value (r/atom nil)]\n    [:div.container-fluid.d-flex.flex-column\n     [:label.lead.m-1\n      {:for :text-search}\n      \"Keyword search\"]\n     [:input.form-control.w-25.focus-ring.py-1.px-2.text-decoration-none.border-rounded-2\n      {:type :search\n       :id :text-search\n       :placeholder \"Shall I compare thee...\"\n       :on-key-up (fn [e] (when (= (.-code e) \"Space\")\n                            (js/console.log @value)))\n       :on-change (fn [e] (let [current (.. e -target -value)]\n                            (reset! value current)))\n       #_#_:on-focus #(js/console.log \"focused\")}]]))"]}