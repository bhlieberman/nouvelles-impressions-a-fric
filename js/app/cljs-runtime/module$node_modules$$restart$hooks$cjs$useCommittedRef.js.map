{
"version":3,
"file":"module$node_modules$$restart$hooks$cjs$useCommittedRef.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,OAAR,CAAkB,IAAK,EACvB,KAAIC,OAASL,OAAA,CAAQ,iCAAR,CAkBbE,QAAQE,CAAAA,OAAR,CARAE,QAAwB,CAACC,KAAD,CAAQ,CAC9B,MAAMC,IAAM,GAAIH,MAAOI,CAAAA,MAAX,EAAmBF,KAAnB,CACZ,IAAIF,MAAOK,CAAAA,SAAX,EAAsB,EAAA,EAAM,CAC1BF,GAAIG,CAAAA,OAAJ,CAAcJ,KADY,CAA5B,CAEG,CAACA,KAAD,CAFH,CAGA,OAAOC,IALuB,CAfmF;",
"sources":["node_modules/@restart/hooks/cjs/useCommittedRef.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$restart$hooks$cjs$useCommittedRef\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar _react = require(\"react\");\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\nfunction useCommittedRef(value) {\n  const ref = (0, _react.useRef)(value);\n  (0, _react.useEffect)(() => {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\nvar _default = useCommittedRef;\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","__esModule","default","_react","useCommittedRef","value","ref","useRef","useEffect","current"]
}
