{"version":3,"sources":["akiroz/re_frame/storage.cljs"],"mappings":";;;;;;AAMA,AAAAA,yBAAA,AAAA,4GAAA,AAAA,21FACE,AAAAC,6BAAA,oFAAA,iDAAA,4DAAA,yDAAA,0DAAA,0DAAA,0DAAA,sDAAA,sDAAA,oDAAA,yDAAA,kDAAA,2DAAA,AAAA,msEAAA,oFAAgBC,qBACAC,yBACAC,wBACAC,wBACAC,yBACAC,wBACAC,sBACA,AAACC,gDAAQC,0BAAUC,MACnB,AAAAC,yDAAA,AAAA,4GAAA,4GAAA,2CAAA,8FAAA,KAAA,2EAAA,6FAAA,AAAA,4EAAA,0FAAA,AAAA,yVAAA,oFAAA,WAAAC,jtBAA8BC;AAA9B,AAAA,6BAAAD,tBAA8BC;WAA9B,MACA,AAAAF,yDAAA,AAAA,4GAAA,4GAAA,2CAAA,8FAAA,KAAA,6EAAA,6FAAA,AAAA,iFAAA,0FAAA,AAAA,8VAAA,oFAAA,WAAAG,7tBAA8BC;AAA9B,AAAA,+BAAAD,xBAA8BC;WAA9B,MACA,AAAAJ,yDAAA,AAAA,4GAAA,4GAAA,2CAAA,8FAAA,KAAA,0EAAA,6FAAA,AAAA,2EAAA,0FAAA,AAAA,wVAAA,oFAAA,WAAAK,9sBAA8BC;AAA9B,AAAA,4BAAAD,rBAA8BC;WAA9B,MACA,AAAAN,yDAAA,AAAA,gUAAA,AAAAO,yDAAA,AAAA,mTAAA,mFAAA,4GAAA,qHAAA,2CAAA,+EAAA,WAAAC,iBAAAC;AAAA,AAAA,OAAAC,4CAAAD,iBAAA;GAAA,qDAAA,mCAAA,8FAAA,KAAA,qDAAAE,qBAAA,6FAAA,AAAA,2EAAA,0FAAA,AAAA,iUAAA,oFAAA,WAAAC;AAAA,AAAA,OAAAD,qBAAAC;yBAXhB,dAWgB;AAKlB,AAAKC,wCAAc,6CAAA,7CAACC;AAGpB,yCAAA,zCAAMC,0FAAgBC;AAAtB,AACE,oBAAU,iBAAAC,eAAA,AAAAC,gBAAEL;AAAF,AAAA,QAAAI,6CAAAA,wDAAAA,bAAgBD,oCAAAA;;AAA1B;;AAAA,AACE,OAACG,mDAAMN,sCAAcO,gBAAMJ,UACpB,AAACK,sCAAc,6CAAA,7CAACP,mDAAUE;;;AAErC,AAAA5B,yBAAA,AAAA,yHAAA,AAAA,mZAAA,AAAAkC,2BAAA,AAAAC,wDAAA,AAAA,ysBAAA,KAAA,MAAA,AAAA,qPAAA,AAAAA,wDAAA,AAAA,2EAAAC,qBAAA,KAAA,MAAA,AAAA,2EAAA,KAAA,AAAA,KAAA,58BACQ,AAAAC,yBAAA,mFAAA,uEAAA,oHAAA,AAAA,jCAAkB/B;AAG1B,qCAAA,rCAAMgC,kFAASV,UAAUW;AAAzB,AACE,OAACC,sBAAO,iBAAAC,eAAA,AAAAX,gBAAEL;AAAF,AAAA,QAAAgB,6CAAAA,wDAAAA,bAAgBb,oCAAAA;KAAWW;;AAErC,AAAAvC,yBAAA,AAAA,6GAAA,AAAA,ojBAAA,AAAAkC,2BAAA,AAAAC,wDAAA,AAAA,unCAAA,KAAA,MAAA,AAAA,sZAAA,AAAAA,wDAAA,AAAA,2EAAAC,qBAAA,KAAA,MAAA,AAAA,2EAAA,KAAA,AAAA,KAAA,13CACQ,AAAAC,yBAAA,mFAAA,+DAAA,6DAAA,4GAAA,oHAAA,AAAA,7IAAkB/B;AAI1B,qCAAA,rCAAMoC,kFAASd;AAAf,AAAA,OAAAE,gBACG,iBAAAa,eAAA,AAAAb,gBAAEL;AAAF,AAAA,QAAAkB,6CAAAA,wDAAAA,bAAgBf,oCAAAA;;;AAEnB,AAAA5B,yBAAA,AAAA,4GAAA,AAAA,kjBAAA,AAAAkC,2BAAA,AAAAC,wDAAA,AAAA,ysBAAA,KAAA,MAAA,AAAA,qPAAA,AAAAA,wDAAA,AAAA,4GAAA,4GAAA,KAAA,MAAA,AAAA,4GAAA,KAAA,AAAA,KAAA,rmCACQ,AAAAE,yBAAA,mFAAA,uEAAA,oHAAA,AAAA,jCAAkB/B;AAM1B,0CAAA,4DAAAsC,tGAAMI,4FAAYpB;AAAlB,AAAA,IAAAiB,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAoCI;WAApC,AAAAF,4CAAAF,eAAA,lEAAuCK;AAAvC,AACE,AAACvB,uCAAeC;;AAChB,oBAAMqB;AAAN,AACE,AAACE,qBACCF,GACA,WAAKV;AAAL,AACE,OAACD,mCAAQV,UAAUW;;;AAJzB;;AAKA,oBAAMW;AAAN,AACE,OAACE,uBACCF,KACA,WAAKG,UAAUC;AAAf,AACE,OAACC,8CAAMF,UAAUH,KAAK,AAACR,mCAAQd;;;AAJrC;;;AAMF,AAAA5B,yBAAA,AAAA,+FAAA,AAAA,iFAAYM;AACZ,AAAAN,yBAAA,AAAA,iGAAA,AAAA,iFAAcM;AACd,AAAAN,yBAAA,AAAA,mHAAA,AAAA,89BAAA,AAAAkC,2BAAA,AAAAC,wDAAA,AAAA,g0BACQ,AAAAE,yBAAA,mFAAA,+DAAA,mEAAA,mFAAkB/B,yBACD,AAAAkD,8BAAA,wCAAA,yDAAA,wDAAA,kDAAA,iEAAA,8DAAA,6DAAA,8DAAA,mDAAA,4DAAA,+DAAA,gEAAA,qDAAA,AAAA,gWAAA,AAAA,KAAA,KAAA,mFAAA,WAAAC;AAAA,AAAA,OAAAlC,qBAAAkC;GAAA,WAAAA;AAAA,AAAA,SAAA,AAAAC,0BAAAD,SAAA,wDAAA,AAAAC,0BAAAD,SAAA;WAAA,WAAAA;AAAA,AAAA,SAAA,AAAAlC,qBAAAkC,eAAA,EAAA,AAAAC,0BAAAD,SAAA,wDAAA,AAAAC,0BAAAD,SAAA;k5EAFzB,KAAA,MAAA,AAAA,g0BAAA,AAAAtB,wDAAA,AAAA,2EAAAC,qBAAA,KAAA,MAAA,AAAA,2EAAA,KAAA,AAAA,KAAA,hwDACQ,AAAA,ltDACiB,AAAA,iCAAA,AAAA,2RAAA,AAAA,KAAA,AAAA,kMAAA,AAAA,iCAAA,AAAA,8pCAAA,AAAA;AAGzB,qCAAA,rCAAMuB,kFAAY/B,UAAUgC;AAA5B,AACE,AAACjC,uCAAeC;;AAChB,6HAAA,8NAAA,pVAACiC,wKACK,AAACC,gDAAQ,qDAAA,RAAKF,yDAAYhC,gFACtB,WAAKmC;AAAL,AACE,kCAAA,mFAAA,8DAAA,5KAACC,mBAASD,yMAAwBH,eACxB,AAAClB,mCAAQd;GAJ/B,sDAKS,WAAKmC;AAAL,AACE,IAAAE,2BAAiB,uDAAA,mFAAA,2DAAA,rMAACE,+CAAOJ,sMAAsBH;AAA/C,AAAA,oBAAAK;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AACE,AAAC5B,mCAAQV,UAAUsC;;AADrB;;AAEAH;;;AAEb,AAAA/D,yBAAA,AAAA,gHAAA,AAAA,4hBAAA,AAAAkC,2BAAA,AAAAC,wDAAA,AAAA,o/BAAA,KAAA,MAAA,AAAA,8XAAA,AAAAA,wDAAA,AAAA,2EAAAC,qBAAA,KAAA,MAAA,AAAA,2EAAA,KAAA,AAAA,KAAA,vvCACQ,AAAAC,yBAAA,mFAAA,+DAAA,gEAAA,6IAAA,AAAA,1DAAkB/B,yBACHA;AAGvB,0CAAA,1CAAM8D,4FAAiBxC,UAAUyC;AAAjC,AACE,AAAC1C,uCAAeC;;AAChB,6HAAA,0UAAA,hcAACiC,wKACK,AAACC,gDAAQ,iKAAA,pHAAK,AAACQ,8CAAMC,cAAI,AAACC,6CAAKH,4DAAezC,gFAC1C,WAAKmC;AAAL,AACE,iEAAA,mFAAA,8DAAA,3MAACU,kDAAUV,iNAAyBW,gBAAM,AAAChC,mCAAQd;GAH/D,sDAIS,WAAKmC;AAAL,AACE,IAAAE,2BAAiB,iBAAAU,WAAQ,uDAAA,mFAAA,2DAAA,rMAACR,+CAAOJ;AAAhB,AAAA,GAAA,CAAAY,YAAA;AAAA;;AACQ,6BAAAA,tBAACC,+BAAYP;;;AADtC,AAAA,oBAAAJ;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AAEE,AAAC5B,mCAAQV,UAAUsC;;AAFrB;;AAGAH;;;AAEb,AAAA/D,yBAAA,AAAA,2HAAA,AAAA,2oBAAA,AAAAkC,2BAAA,AAAAC,wDAAA,AAAA,6eACQ,AAAAE,yBAAA,mFAAA,+DAAA,mEAAA,mFAAkB/B,yBACF,AAAAM,yDAAA,AAAA,0FAAA,2CAAA,8FAAA,KAAA,6FAAA,AAAA,KAAA,0FAAA,AAAA,6LAAA,oFAAA,WAAAiE,/nBAAWvE;AAAX,AAAA,OAAAwE,sBAAAD;mYAFxB,KAAA,MAAA,AAAA,6eAAA,AAAA1C,wDAAA,AAAA,2EAAAC,qBAAA,KAAA,MAAA,AAAA,2EAAA,KAAA,AAAA,KAAA,1lCACQ,AAAA,dACgB","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/or-spec-impl","cljs.core/nil?","cljs.core/boolean?","cljs.core/number?","cljs.core/string?","cljs.core/keyword?","cljs.core/symbol?","cljs.core/uuid?","cljs.core.partial","cljs.core/instance?","js/Date","cljs.spec.alpha.every_impl","G__26946","cljs.core/list?","G__26947","cljs.core/vector?","G__26948","cljs.core/set?","cljs.spec.alpha.tuple_impl","i__11666__auto__","v__11667__auto__","cljs.core.nth","cljs.core/map?","G__26949","akiroz.re-frame.storage/storage-atoms","cljs.core.atom","akiroz.re-frame.storage/register-store","store-key","fexpr__26950","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","alandipert.storage-atom/local-storage","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.core/any?","cljs.spec.alpha/cat-impl","akiroz.re-frame.storage/->store","data","cljs.core/reset!","fexpr__26951","akiroz.re-frame.storage/<-store","fexpr__26952","p__26953","map__26954","cljs.core/--destructure-map","cljs.core.get","akiroz.re-frame.storage/reg-co-fx!","fx","cofx","re-frame.core/reg-fx","re-frame.core/reg-cofx","coeffects","_","cljs.core.assoc","cljs.spec.alpha/map-spec-impl","G__26955","cljs.core/contains?","akiroz.re-frame.storage/persist-db","db-key","re_frame.core.__GT_interceptor","cljs.core.keyword","context","cljs.core/assoc-in","temp__5804__auto__","value","cljs.core.get_in","akiroz.re-frame.storage/persist-db-keys","db-keys","cljs.core.apply","cljs.core/str","cljs.core.sort","cljs.core.update_in","cljs.core/merge","G__26958","cljs.core/select-keys","G__26959","cljs.core/coll?"],"sourcesContent":["(ns akiroz.re-frame.storage\n  (:require [re-frame.core :refer [reg-fx reg-cofx ->interceptor]]\n            [alandipert.storage-atom :refer [local-storage]]\n            [cljs.spec.alpha :as s]\n            ))\n\n(s/def ::cljs-data\n  (s/or :nil      nil?\n        :boolean  boolean?\n        :number   number?\n        :string   string?\n        :keyword  keyword?\n        :symbol   symbol?\n        :uuid     uuid?\n        :date     (partial instance? js/Date)\n        :list     (s/coll-of  ::cljs-data :kind list?)\n        :vector   (s/coll-of  ::cljs-data :kind vector?)\n        :set      (s/coll-of  ::cljs-data :kind set?)\n        :map      (s/map-of   ::cljs-data ::cljs-data)\n        ))\n\n\n;; atom containing local-storage atoms\n(def storage-atoms (atom {}))\n\n\n(defn register-store [store-key]\n  (when-not (@storage-atoms store-key)\n    (swap! storage-atoms assoc store-key\n           (local-storage (atom nil) store-key))))\n\n(s/fdef register-store\n  :args (s/cat :store-key keyword?))\n\n\n(defn ->store [store-key data]\n  (reset! (@storage-atoms store-key) data))\n\n(s/fdef ->store\n  :args (s/cat :store-key keyword?\n               :data ::cljs-data))\n\n\n(defn <-store [store-key]\n  @(@storage-atoms store-key))\n\n(s/fdef <-store\n  :args (s/cat :store-key keyword?)\n  :ret  ::cljs-data)\n\n\n\n\n(defn reg-co-fx! [store-key {:keys [fx cofx]}]\n  (register-store store-key)\n  (when fx\n    (reg-fx\n      fx\n      (fn [data]\n        (->store store-key data))))\n  (when cofx\n    (reg-cofx\n      cofx\n      (fn [coeffects _]\n        (assoc coeffects cofx (<-store store-key))))))\n\n(s/def ::fx keyword?)\n(s/def ::cofx keyword?)\n(s/fdef reg-co-fx!\n  :args (s/cat :store-key keyword?\n               :handlers (s/keys :req-un [(or ::fx ::cofx)])))\n\n\n(defn persist-db [store-key db-key]\n  (register-store store-key)\n  (->interceptor\n    :id (keyword (str db-key \"->\" store-key))\n    :before (fn [context]\n              (assoc-in context [:coeffects :db db-key]\n                        (<-store store-key)))\n    :after (fn [context]\n             (when-let [value (get-in context [:effects :db db-key])]\n               (->store store-key value))\n             context)))\n\n(s/fdef persist-db\n  :args (s/cat :store-key keyword?\n               :db-key keyword?))\n\n\n(defn persist-db-keys [store-key db-keys]\n  (register-store store-key)\n  (->interceptor\n    :id (keyword (str (apply str (sort db-keys)) \"->\" store-key))\n    :before (fn [context]\n              (update-in context [:coeffects :db] merge (<-store store-key)))\n    :after (fn [context]\n             (when-let [value (some-> (get-in context [:effects :db])\n                                      (select-keys db-keys))]\n               (->store store-key value))\n             context)))\n\n(s/fdef persist-db-keys\n  :args (s/cat :store-key keyword?\n               :db-keys (s/coll-of keyword?)))\n\n\n"],"x_google_ignoreList":[0]}