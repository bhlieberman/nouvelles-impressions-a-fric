import "./cljs_env.js";
import "./shadow.js.js";
import "./module$node_modules$$babel$runtime$helpers$interopRequireDefault.js";
import "./module$node_modules$$babel$runtime$helpers$extends.js";
import "./module$node_modules$react$index.js";
import "./module$node_modules$$mui$utils$index.js";
import "./module$node_modules$$mui$base$node$useButton$index.js";
import "./module$node_modules$$mui$base$node$useListbox$index.js";
import "./module$node_modules$$mui$base$node$SelectUnstyled$defaultOptionStringifier.js";
import "./module$node_modules$$mui$base$node$useSelect$useSelectChangeNotifiers.js";
shadow$provide.module$node_modules$$mui$base$node$useSelect$useSelect=function(global,require,module,exports){function _getRequireWildcardCache(nodeInterop$jscomp$0){if("function"!==typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop$jscomp$0)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;
if(null===obj||"object"!==typeof obj&&"function"!==typeof obj)return{default:obj};if((nodeInterop=_getRequireWildcardCache(nodeInterop))&&nodeInterop.has(obj))return nodeInterop.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor,key;for(key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,
desc):newObj[key]=obj[key]}newObj.default=obj;nodeInterop&&nodeInterop.set(obj,newObj);return newObj}global=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _extends2=global(require("module$node_modules$$babel$runtime$helpers$extends")),React=_interopRequireWildcard(require("module$node_modules$react$index")),_utils=require("module$node_modules$$mui$utils$index"),_useButton=global(require("module$node_modules$$mui$base$node$useButton$index")),
_useListbox=_interopRequireWildcard(require("module$node_modules$$mui$base$node$useListbox$index")),_defaultOptionStringifier=global(require("module$node_modules$$mui$base$node$SelectUnstyled$defaultOptionStringifier")),_useSelectChangeNotifiers=global(require("module$node_modules$$mui$base$node$useSelect$useSelectChangeNotifiers"));exports.default=function(props){const {buttonRef:buttonRefProp,defaultValue:defaultValueProp,disabled=!1,listboxId:listboxIdProp,listboxRef:listboxRefProp,multiple=!1,
onChange,onHighlightChange,onOpenChange,open=!1,options,optionStringifier=_defaultOptionStringifier.default,value:valueProp}=props,buttonRef=React.useRef(null);var handleButtonRef=(0,_utils.unstable_useForkRef)(buttonRefProp,buttonRef);const listboxRef=React.useRef(null),listboxId=(0,_utils.unstable_useId)(listboxIdProp);let defaultValue=defaultValueProp;void 0===valueProp&&void 0===defaultValueProp&&(defaultValue=multiple?[]:null);const optionsMap=React.useMemo(()=>{const map=new Map;options.forEach(option=>
{map.set(option.value,option)});return map},[options]),ignoreEnterKeyUp=React.useRef(!1),ignoreClick=React.useRef(!1),[listboxFocusRequested,requestListboxFocus]=React.useState(!1),focusListboxIfRequested=React.useCallback(()=>{listboxFocusRequested&&null!=listboxRef.current&&(listboxRef.current.focus(),requestListboxFocus(!1))},[listboxFocusRequested]),handleListboxRef=(0,_utils.unstable_useForkRef)(listboxRefProp,listboxRef,focusListboxIfRequested),{notifySelectionChanged,notifyHighlightChanged,
registerHighlightChangeHandler,registerSelectionChangeHandler}=(0,_useSelectChangeNotifiers.default)();React.useEffect(()=>{focusListboxIfRequested()},[focusListboxIfRequested]);React.useEffect(()=>{requestListboxFocus(open)},[open]);const createHandleMouseDown=otherHandlers=>event=>{var _otherHandlers$onMous;null==otherHandlers?void 0:null==(_otherHandlers$onMous=otherHandlers.onMouseDown)?void 0:_otherHandlers$onMous.call(otherHandlers,event);!event.defaultPrevented&&open&&(ignoreClick.current=
!0)},createHandleButtonClick=otherHandlers=>event=>{var _otherHandlers$onClic;null==otherHandlers?void 0:null==(_otherHandlers$onClic=otherHandlers.onClick)?void 0:_otherHandlers$onClic.call(otherHandlers,event);event.defaultPrevented||ignoreClick.current||(null==onOpenChange?void 0:onOpenChange(!open));ignoreClick.current=!1},createHandleButtonKeyDown=otherHandlers=>event=>{var _otherHandlers$onKeyD;null==otherHandlers?void 0:null==(_otherHandlers$onKeyD=otherHandlers.onKeyDown)?void 0:_otherHandlers$onKeyD.call(otherHandlers,
event);event.defaultPrevented||("Enter"===event.key&&(ignoreEnterKeyUp.current=!0),"ArrowDown"!==event.key&&"ArrowUp"!==event.key)||(event.preventDefault(),null==onOpenChange?void 0:onOpenChange(!0))},createHandleListboxKeyUp=otherHandlers=>event=>{var _otherHandlers$onKeyU;null==otherHandlers?void 0:null==(_otherHandlers$onKeyU=otherHandlers.onKeyUp)?void 0:_otherHandlers$onKeyU.call(otherHandlers,event);if(!event.defaultPrevented){_otherHandlers$onKeyU=multiple?["Escape"]:["Escape","Enter"," "];
if(open&&!ignoreEnterKeyUp.current&&_otherHandlers$onKeyU.includes(event.key)){var _buttonRef$current;null==buttonRef?void 0:null==(_buttonRef$current=buttonRef.current)?void 0:_buttonRef$current.focus()}ignoreEnterKeyUp.current=!1}},createHandleListboxItemClick=React.useCallback(otherHandlers=>event=>{var _otherHandlers$onClic2;null==otherHandlers?void 0:null==(_otherHandlers$onClic2=otherHandlers.onClick)?void 0:_otherHandlers$onClic2.call(otherHandlers,event);event.defaultPrevented||multiple||
(null==onOpenChange?void 0:onOpenChange(!1))},[multiple,onOpenChange]),createHandleListboxBlur=otherHandlers=>event=>{var _otherHandlers$onBlur;null==otherHandlers?void 0:null==(_otherHandlers$onBlur=otherHandlers.onBlur)?void 0:_otherHandlers$onBlur.call(otherHandlers,event);event.defaultPrevented||(null==onOpenChange?void 0:onOpenChange(!1))},listboxReducer=React.useCallback((state,action)=>{state=(0,_useListbox.defaultListboxReducer)(state,action);return action.type!==_useListbox.ActionTypes.keyDown||
open||"ArrowUp"!==action.event.key&&"ArrowDown"!==action.event.key?action.type===_useListbox.ActionTypes.blur||action.type===_useListbox.ActionTypes.setValue||action.type===_useListbox.ActionTypes.optionsChange?(0,_extends2.default)({},state,{highlightedValue:state.selectedValue}):state:(0,_extends2.default)({},state,{selectedValue:state.highlightedValue})},[open]),{getRootProps:getButtonRootProps,active:buttonActive,focusVisible:buttonFocusVisible}=(0,_useButton.default)({disabled,ref:handleButtonRef});
handleButtonRef=React.useMemo(()=>options.map(o=>o.value),[options]);const isOptionDisabled=React.useCallback(valueToCheck=>{var _option$disabled;valueToCheck=optionsMap.get(valueToCheck);return null!=(_option$disabled=null==valueToCheck?void 0:valueToCheck.disabled)?_option$disabled:!1},[optionsMap]),stringifyOption=React.useCallback(valueToCheck=>(valueToCheck=optionsMap.get(valueToCheck))?optionStringifier(valueToCheck):"",[optionsMap,optionStringifier]),{getRootProps:getListboxRootProps,getOptionProps:getListboxOptionProps,
getOptionState,highlightedOption,selectedOption}=(0,_useListbox.default)(props.multiple?{defaultValue,id:listboxId,isOptionDisabled,listboxRef:handleListboxRef,multiple:!0,onChange:(e,newValues)=>{null==onChange?void 0:onChange(e,newValues)},onHighlightChange:(e,newValue)=>{null==onHighlightChange?void 0:onHighlightChange(e,null!=newValue?newValue:null)},options:handleButtonRef,optionStringifier:stringifyOption,value:valueProp}:{defaultValue,id:listboxId,isOptionDisabled,listboxRef:handleListboxRef,
multiple:!1,onChange:(e,newValue)=>{null==onChange?void 0:onChange(e,newValue)},onHighlightChange:(e,newValue)=>{null==onHighlightChange?void 0:onHighlightChange(e,newValue)},options:handleButtonRef,optionStringifier:stringifyOption,stateReducer:listboxReducer,value:valueProp});React.useEffect(()=>{notifySelectionChanged(selectedOption)},[selectedOption,notifySelectionChanged]);React.useEffect(()=>{notifyHighlightChanged(highlightedOption)},[highlightedOption,notifyHighlightChanged]);const getOptionProps=
React.useCallback((optionValue,otherHandlers={})=>getListboxOptionProps(optionValue,(0,_extends2.default)({},otherHandlers,{onClick:createHandleListboxItemClick(otherHandlers)})),[getListboxOptionProps,createHandleListboxItemClick]);React.useDebugValue({selectedOption,highlightedOption,open});props=React.useMemo(()=>({listboxRef,getOptionProps,getOptionState,registerHighlightChangeHandler,registerSelectionChangeHandler}),[getOptionProps,getOptionState,registerHighlightChangeHandler,registerSelectionChangeHandler]);
return{buttonActive,buttonFocusVisible,disabled,getButtonProps:(otherHandlers={})=>(0,_extends2.default)({},getButtonRootProps((0,_extends2.default)({},otherHandlers,{onClick:createHandleButtonClick(otherHandlers),onMouseDown:createHandleMouseDown(otherHandlers),onKeyDown:createHandleButtonKeyDown(otherHandlers)})),{role:"combobox","aria-expanded":open,"aria-haspopup":"listbox","aria-controls":listboxId}),getListboxProps:(otherHandlers={})=>getListboxRootProps((0,_extends2.default)({},otherHandlers,
{onBlur:createHandleListboxBlur(otherHandlers),onKeyUp:createHandleListboxKeyUp(otherHandlers)})),contextValue:props,open,value:selectedOption,highlightedOption}}}
//# sourceMappingURL=module$node_modules$$mui$base$node$useSelect$useSelect.js.map
