{
"version":3,
"file":"module$node_modules$$restart$hooks$cjs$useMounted.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,iDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG9GA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,OAAR,CAsBAC,QAAmB,EAAG,CACpB,MAAMC,QAAU,GAAIC,MAAOC,CAAAA,MAAX,EAAmB,CAAA,CAAnB,CAAhB,CACMC,UAAY,GAAIF,MAAOC,CAAAA,MAAX,EAAmB,EAAA,EAAMF,OAAQI,CAAAA,OAAjC,CAClB,IAAIH,MAAOI,CAAAA,SAAX,EAAsB,EAAA,EAAM,CAC1BL,OAAQI,CAAAA,OAAR,CAAkB,CAAA,CAClB,OAAO,EAAA,EAAM,CACXJ,OAAQI,CAAAA,OAAR,CAAkB,CAAA,CADP,CAFa,CAA5B,CAKG,EALH,CAMA,OAAOD,UAAUC,CAAAA,OATG,CArBtB,KAAIH,OAASP,OAAA,CAAQ,iCAAR,CALiG;",
"sources":["node_modules/@restart/hooks/cjs/useMounted.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$restart$hooks$cjs$useMounted\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = useMounted;\nvar _react = require(\"react\");\n/**\n * Track whether a component is current mounted. Generally less preferable than\n * properlly canceling effects so they don't run after a component is unmounted,\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\n *\n * @returns a function that returns the current isMounted state of the component\n *\n * ```ts\n * const [data, setData] = useState(null)\n * const isMounted = useMounted()\n *\n * useEffect(() => {\n *   fetchdata().then((newData) => {\n *      if (isMounted()) {\n *        setData(newData);\n *      }\n *   })\n * })\n * ```\n */\nfunction useMounted() {\n  const mounted = (0, _react.useRef)(true);\n  const isMounted = (0, _react.useRef)(() => mounted.current);\n  (0, _react.useEffect)(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","__esModule","default","useMounted","mounted","_react","useRef","isMounted","current","useEffect"]
}
