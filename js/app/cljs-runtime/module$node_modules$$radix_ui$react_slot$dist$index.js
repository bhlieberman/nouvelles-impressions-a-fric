import "./cljs_env.js";
import "./shadow.js.js";
import "./module$node_modules$$babel$runtime$helpers$extends.js";
import "./module$node_modules$react$index.js";
import "./module$node_modules$$radix_ui$react_compose_refs$dist$index.js";
shadow$provide.module$node_modules$$radix_ui$react_slot$dist$index=function(global,require,module,exports){function $parcel$export(e,n,v,s){Object.defineProperty(e,n,{get:v,set:s,enumerable:!0,configurable:!0})}function $82dc8d030dec7549$var$isSlottable(child){return $dAvBt$react.isValidElement(child)&&child.type===$82dc8d030dec7549$export$d9f1ccf0bdb05d45}function $82dc8d030dec7549$var$mergeProps(slotProps,childProps){const overrideProps={...childProps};for(const propName in childProps){const slotPropValue=
slotProps[propName],childPropValue=childProps[propName];/^on[A-Z]/.test(propName)?slotPropValue&&childPropValue?overrideProps[propName]=(...args)=>{childPropValue(...args);slotPropValue(...args)}:slotPropValue&&(overrideProps[propName]=slotPropValue):"style"===propName?overrideProps[propName]={...slotPropValue,...childPropValue}:"className"===propName&&(overrideProps[propName]=[slotPropValue,childPropValue].filter(Boolean).join(" "))}return{...slotProps,...overrideProps}}var $dAvBt$babelruntimehelpersextends=
require("module$node_modules$$babel$runtime$helpers$extends"),$dAvBt$react=require("module$node_modules$react$index"),$dAvBt$radixuireactcomposerefs=require("module$node_modules$$radix_ui$react_compose_refs$dist$index");$parcel$export(module.exports,"Slot",()=>$82dc8d030dec7549$export$8c6ed5c666ac1360);$parcel$export(module.exports,"Slottable",()=>$82dc8d030dec7549$export$d9f1ccf0bdb05d45);$parcel$export(module.exports,"Root",()=>$82dc8d030dec7549$export$be92b6f5f03c0fe9);const $82dc8d030dec7549$export$8c6ed5c666ac1360=
$dAvBt$react.forwardRef((props,forwardedRef)=>{const {children,...slotProps}=props;props=$dAvBt$react.Children.toArray(children);const slottable=props.find($82dc8d030dec7549$var$isSlottable);if(slottable){const newElement=slottable.props.children;props=props.map(child=>child===slottable?1<$dAvBt$react.Children.count(newElement)?$dAvBt$react.Children.only(null):$dAvBt$react.isValidElement(newElement)?newElement.props.children:null:child);return $dAvBt$react.createElement($82dc8d030dec7549$var$SlotClone,
($dAvBt$babelruntimehelpersextends&&$dAvBt$babelruntimehelpersextends.__esModule?$dAvBt$babelruntimehelpersextends.default:$dAvBt$babelruntimehelpersextends)({},slotProps,{ref:forwardedRef}),$dAvBt$react.isValidElement(newElement)?$dAvBt$react.cloneElement(newElement,void 0,props):null)}return $dAvBt$react.createElement($82dc8d030dec7549$var$SlotClone,($dAvBt$babelruntimehelpersextends&&$dAvBt$babelruntimehelpersextends.__esModule?$dAvBt$babelruntimehelpersextends.default:$dAvBt$babelruntimehelpersextends)({},
slotProps,{ref:forwardedRef}),children)});$82dc8d030dec7549$export$8c6ed5c666ac1360.displayName="Slot";const $82dc8d030dec7549$var$SlotClone=$dAvBt$react.forwardRef((props,forwardedRef)=>{const {children,...slotProps}=props;return $dAvBt$react.isValidElement(children)?$dAvBt$react.cloneElement(children,{...$82dc8d030dec7549$var$mergeProps(slotProps,children.props),ref:forwardedRef?$dAvBt$radixuireactcomposerefs.composeRefs(forwardedRef,children.ref):children.ref}):1<$dAvBt$react.Children.count(children)?
$dAvBt$react.Children.only(null):null});$82dc8d030dec7549$var$SlotClone.displayName="SlotClone";const $82dc8d030dec7549$export$d9f1ccf0bdb05d45=({children})=>$dAvBt$react.createElement($dAvBt$react.Fragment,null,children),$82dc8d030dec7549$export$be92b6f5f03c0fe9=$82dc8d030dec7549$export$8c6ed5c666ac1360}
//# sourceMappingURL=module$node_modules$$radix_ui$react_slot$dist$index.js.map
