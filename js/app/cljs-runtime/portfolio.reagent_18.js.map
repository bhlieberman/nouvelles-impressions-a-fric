{"version":3,"sources":["portfolio/reagent_18.cljs"],"mappings":";AASA,gCAAA,hCAAMA,wEAAUC;AAAhB,AACE,oBAAU,AAAaA;AAAvB;AAAA,AACE,CAAM,AAAaA,eAAI,AAACC,+BAAgBD;;;AAC1C,OAAaA;;AAEf,sCAAA,2CAAA,AAAA,jFAAKE,mMAEF,WAAAC,SAAyBH;AAAzB,AAAA,IAAAI,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;gBAAA,AAAAE,4CAAAF,eAAA,vEAAaG;AAAb,AACE,GAAQ,GAAA,OAAA,NAAOP;AAAf;AAAA,AAAA,MAAA,KAAAQ,MAAA,CAAA,kBAAA,uDAAA,KAAA;;;AACA,IAAAC,2BAAa,iBAAAE,WAAQX;AAAR,AAAA,GAAA,CAAAW,YAAA;AAAA;;AAAA,OAAAA;;;AAAb,AAAA,oBAAAF;AAAA,AAAA,cAAAA,VAAWC;AAAX,AACE,GAAU,6CAAA,7CAACE,uDAAY,AAAcZ;AAArC;AAAA,AACE,CAACU,wCAAAA,0CAAAA;;;AAFL;;AAGA,IAAMG,OAAK,AAACd,8BAASC;AAArB,AACE,CAAM,AAAWA,aAAI;AAAA,AACE,AAAUa;;AACV,gBAAA,fAAM,AAAab;;AACnB,gBAAA,fAAM,AAAaA;;AACnB,qBAAA,bAAM,AAAWA;;;AACxC,iBAAA,hBAAM,AAAcA;;AACpB,OAACc,wDAAWD,KAAK,kCAAA,hCAAI,AAACE,oBAAIR,+FACNA,kBACDA;;AAE1B,oCAAA,pCAAMS,gFAAcC;AAApB,AACE,OAACC,gCAAsBD,MAAMf;;AAE/B,AAACiB,6CACA,WAAKC;AAAL,AACE,IAAAX,qBAAiB,6CAAA,2CAAA,yEAAA,6IAAA,5SACE,AAACY,uCAAmBD,8GACRA,YAEZ,AAACC,uCAAmB,AAAA,6FAAYD,KAChCA;AALnB,AAAA,oBAAAX;AAAA,AAAA,YAAAA,RAAWQ;AAAX,AAME,OAACD,kCAAaC;;AANhB","names":["portfolio.reagent-18/get-root","el","reagent.dom.client/create-root","portfolio.reagent-18/component-impl","p__28769","map__28770","cljs.core/--destructure-map","cljs.core.get","component","js/Error","temp__5804__auto__","f","G__28771","cljs.core._EQ_","root","reagent.dom.client.render","cljs.core/fn?","portfolio.reagent-18/create-scene","scene","portfolio.adapter/prepare-scene","portfolio.data/register-scene-renderer!","x","reagent.impl.template/valid-tag?"],"sourcesContent":["(ns portfolio.reagent-18\n  (:require [reagent.dom.client :as rdc]\n            [reagent.impl.template :as reagent]\n            [portfolio.adapter :as adapter]\n            [portfolio.data :as data])\n  (:require-macros [portfolio.reagent-18]))\n\n::data/keep\n\n(defn get-root [el]\n  (when-not (.-reactRoot el)\n    (set! (.-reactRoot el) (rdc/create-root el)))\n  (.-reactRoot el))\n\n(def component-impl\n  {`adapter/render-component\n   (fn [{:keys [component]} el]\n     (assert (some? el) \"Asked to render Reagent component without an element\")\n     (when-let [f (some-> el .-unmount)]\n       (when-not (= \"react18\" (.-unmountLib el))\n         (f)))\n     (let [root (get-root el)]\n       (set! (.-unmount el) (fn []\n                              (.unmount root)\n                              (set! (.-reactRoot el) nil)\n                              (set! (.-innerHTML el) \"\")\n                              (set! (.-unmount el) nil)))\n       (set! (.-unmountLib el) \"react18\")\n       (rdc/render root (if (fn? component)\n                          [component]\n                          component))))})\n\n(defn create-scene [scene]\n  (adapter/prepare-scene scene component-impl))\n\n(data/register-scene-renderer!\n (fn [x]\n   (when-let [scene (cond\n                      (reagent/valid-tag? x)\n                      {:component x}\n\n                      (reagent/valid-tag? (:component x))\n                      x)]\n     (create-scene scene))))\n"],"x_google_ignoreList":[0]}