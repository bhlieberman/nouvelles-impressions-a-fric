{"version":3,"sources":["re_frame/query/alpha.cljc"],"mappings":"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","names":["re-frame.query.alpha/legacy-lifecycle","v","cljs.core/vector?","or__5045__auto__","G__28730","re-frame.query.alpha/lifecycle","cljs.core/meta","cljs.core.some_fn","cljs.core/constantly","re-frame.query.alpha/legacy-query-id","q","cljs.core/first","re-frame.query.alpha/id","re-frame.query.alpha/method","G__28732","fexpr__28731","cljs.core/deref","re-frame.register.alpha/lifecycle->method","re-frame.query.alpha/clear-all-methods!","cljs.core/reset!","re-frame.query.alpha/cache","cljs.core.atom","re-frame.query.alpha/cached","temp__5806__auto__","r","cljs.core.get_in","re-frame.trace/is-trace-enabled?","new-trace__15981__auto__","cljs.core.merge","cljs.core.update","re-frame.trace/*current-trace*","cljs.core/merge","cljs.core.dissoc","re-frame.interop/reagent-id","re-frame.query.alpha/cache!","cljs.core.swap_BANG_","cljs.core/assoc-in","var_args","G__28742","re-frame.query.alpha/clear!","js/Error","re_frame.query.alpha.clear_BANG_","strat","cljs.core/update","cljs.core/dissoc","re-frame.query.alpha/handle","handler","re_frame.registrar.get_handler","re-frame.db/app-db","re_frame.loggers.console","re-frame.query.alpha/query?","and__5043__auto__"],"sourcesContent":["(ns re-frame.query.alpha\n  (:require\n   [re-frame :as-alias rf]\n   [re-frame.db :refer [app-db]]\n   [re-frame.interop :refer [reagent-id]]\n   [re-frame.loggers :refer [console]]\n   [re-frame.register.alpha :refer [lifecycle->method]]\n   [re-frame.registrar :refer [get-handler]]\n   [re-frame.trace :as trace :include-macros true]))\n\n(declare lifecycle)\n\n(defn legacy-lifecycle [v]\n  (when (vector? v)\n    (or (lifecycle (meta v))\n        :default)))\n\n(def lifecycle (some-fn legacy-lifecycle\n                        ::rf/lifecycle\n                        (constantly :default)))\n\n(defn legacy-query-id [q]\n  (when (vector? q) (first q)))\n\n(def id (some-fn legacy-query-id ::rf/q))\n\n(defn method [q] (@lifecycle->method (lifecycle q)))\n\n(defn clear-all-methods! [] (reset! lifecycle->method {}))\n\n(def cache (atom {}))\n\n(defn cached [q] (if-some [r (get-in @cache [(lifecycle q) q])]\n                   (do (trace/merge-trace! {:tags {:cached? true\n                                                   :reaction (reagent-id r)}})\n                       r)\n                   (trace/merge-trace! {:tags {:cached? false}})))\n\n(defn cache! [q r] (swap! cache assoc-in [(lifecycle q) q] r) r)\n\n(defn clear!\n  ([] (reset! cache {}))\n  ([q] (clear! q (lifecycle q)))\n  ([q strat] (swap! cache update strat dissoc q)))\n\n(defn handle [q]\n  (let [handler (get-handler :sub (id q))]\n    (if-not (nil? handler)\n      (handler app-db q)\n      (do (trace/merge-trace! {:error true})\n          (console :error\n                   \"re-frame: no subscription handler registered for: \"\n                   (id q)\n                   \". Returning a nil subscription.\")))))\n\n(defn query? [q]\n  (some? (and (id q)\n              (lifecycle q))))\n"],"x_google_ignoreList":[0]}